{"version":3,"sources":["pushfight/web.cljs"],"mappings":";AAUA,AAAA,6BAAA,qCAAAA,lEAAMM;AAAN,AAAA,IAAAL,qBAAA;AAAA,AAAA,IAAAC,0BAAA,AAAA;AAAA,AAAA,IAAAC,wBAAA;;AAAA,AAAA,GAAA,CAAAA,wBAAAD;AAAA,AAAA,AAAAD,wBAAA,CAAA,UAAAE;;AAAA,eAAA,CAAAA,wBAAA;;;;AAAA;;;;AAAA,IAAAC,uBAAA,EAAA,CAAA,MAAA,AAAAH,4BAAA,AAAA,KAAAI,qBAAA,AAAAJ,yBAAA,KAAA,IAAA,OAAA;AAAA,AAAA,OAAAK,gEAAA,CAAA,UAAA,MAAAF;;;AAAA,AAAA,CAAA,kEAAA,gBAAAG,lFAAMD,6EAAWU;AAAjB,AAAA,IAAAR,aAAAD;IAAAC,iBAAA,AAAAC,4BAAAD;sBAAA,AAAAE,4CAAAF,eAAA,7EAAgCS;AAAhC,AACE,IAAMC,QAAM,AAAA,qFAAQF;IACdG,kBAAU,AAACC,+BAAaJ;IACxBK,aAAW,8DAAA,8DAAA,oEAAA,AAAA,9LAEE,AAACC,4BAAUJ,QAAOK,0BAClB,AAACC,4BAAUN,QAAOO,0CAElBN,iBAAcO;;IAG3BC,OAAW,yCAAA,eAAA,mCAAA,SAAA,sCAAA,SAAA,uCAAA,SAAA,AAAA,jMACE,AAACC,gCAAcZ,wCACfG,4BACA,AAACU,4BAAUX,mBACX,AAACY,6BAAWZ;;IAEzBa,wBAAsB,kBAAM,iBAAAC,oBAAKb;AAAL,AAAA,oBAAAa;AAAe,UAAA,UAAA,TAAOd;;AAAtBc;;MAAN,2BAAA,3BAAoCC;IAC1DC,mBAAiB,mDAAA,yCAAA,gBAAA,oEAAA,9JACEjB,iBAAqBA,kBACrB,AAACkB,gCAAcnB,yBACf,AAACY,gCAAcZ,OAAMiB,2BACAG;;AArB9C,AAAA,+GAAA,2CAAA,mDAAA,2CAAA,6FAAA,0EAAA,2DAAA,YAAA,wGAAA,2CAAA,mDAAA,2CAAA,7nBAuBGC,0OAA6BH,wEACXb,6KAEhBiB,0OAA6BP,sCAC5BJ;;;AA5BR,CAAA,qDAAA,rDAAMrB;;AAAN;AAAA,CAAA,+CAAA,WAAAK,1DAAML;AAAN,AAAA,IAAAM,WAAA,AAAAC,gBAAAF;IAAAA,eAAA,AAAAG,eAAAH;AAAA,AAAA,IAAAI,qBAAA;AAAA,AAAA,OAAAA,wDAAAH,SAAAD;;;AAAA,AA+BA,8BAAA,9BAAM4B,oEAAeC,MAAMC,uBAAiBC;AAA5C,AAAA,0FACKC,wBACE,iBAAAC,qBAAA,oDAAAC;AAAA,AAAA,YAAAC,kBAAA,KAAA;AAAA,AAAA,IAAAD,eAAAA;;AAAA,AAAA,IAAAE,qBAAA,AAAAC,cAAAH;AAAA,AAAA,GAAAE;AAAA,AAAA,IAAAF,eAAAE;AAAA,AAAA,GAAA,AAAAE,6BAAAJ;AAAA,IAAAK,kBAi6E4C,AAAAqK,sBAAA1K;IAj6E5CM,qBAAA,AAAAC,gBAAAF;IAAAG,WAAA,AAAAC,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAJ;AAAA,SAAA,AAAAK,eAAAN,gBAAAK,pCAAMS;AAAN,AAAA,IACYE,IAAE,AAACxD,4CAAI8B,MAAMwB;AADzB,AAAA,AAAA,AAAAP,uBAAAJ,SAAA,wGAAA,rBAEGf,wGACC,AAAC6B,8CACC,iBAAAvB,qBAAA;yEAAAwB;AAAA,AAAA,YAAAtB,kBAAA,KAAA;;AAAA,AAAA,IAAAsB,eAAAA;;AAAA,AAAA,IAAArB,yBAAA,AAAAC,cAAAoB;AAAA,AAAA,GAAArB;AAAA,AAAA,IAAAqB,eAAArB;AAAA,AAAA,GAAA,AAAAE,6BAAAmB;AAAA,IAAAlB,sBA65EsC,AAAAqK,sBAAAnJ;IA75EtCjB,yBAAA,AAAAC,gBAAAF;IAAAmB,WAAA,AAAAf,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAmB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAnB;AAAA,SAAA,AAAAK,eAAAN,oBAAAoB,xCAAMM;AAAN,AAAA,IACY5D,OAAK,AAACN,4CAAIwD,EAAEU;IACZC,WAAS,kDAAA,IAAA,mFAAA,zIAACC,gJAAwBd,GAAGY;AAFjD,AAAA,AAAA,AAAAnB,uBAAAY,SAAA,oBAAA,wGAAA,2CAAA,2DAAA,IAAA,0DAAA,zLAImBhC;;AAJnB,AAKiC,IAAA0C,WAAa/D;IAAbgE,WAAA,mFAAmBhB,GAAGY;AAAtB,AAAA,wGAAAG,SAAAC,uCAAAD,SAAAC,zJAACtC,iDAAAA,oEAAAA;;SACd,uHAAA,vHAAC6C,gEAAUvE,kIACiB,iBAAAwE,WAAA,mFAAmBxB,GAAGY;AAAtB,AAAA,oHAAAY,6CAAAA,zJAAC/C,uDAAAA,iEAAAA;mBAPjD,2CAAA,oDAISoC;;AAJT,eAAA,CAAAP,WAAA;;;;AAAA;;;;;AAAA,OAAAZ,qBAAA,AAAAC,gBAAAU,UAAA,AAAAE,wDAAA,AAAAV,qBAAAO;;AAAA,OAAAV,qBAAA,AAAAC,gBAAAU,UAAA;;;AAAA,SAAA,AAAAxD,gBAAAuD,rBAAMQ;AAAN,AAAA,IACY5D,OAAK,AAACN,4CAAIwD,EAAEU;IACZC,WAAS,kDAAA,IAAA,mFAAA,zIAACC,gJAAwBd,GAAGY;AAFjD,AAAA,OAAAd,eAAA,oBAAA,wGAAA,2CAAA,2DAAA,IAAA,0DAAA,zLAImBzB;;AAJnB,AAKiC,IAAA4C,WAAajE;IAAbkE,WAAA,mFAAmBlB,GAAGY;AAAtB,AAAA,wGAAAK,SAAAC,uCAAAD,SAAAC,zJAACxC,iDAAAA,oEAAAA;;SACd,uHAAA,vHAAC6C,gEAAUvE,kIACiB,iBAAAyE,WAAA,mFAAmBzB,GAAGY;AAAtB,AAAA,oHAAAa,6CAAAA,zJAAChD,uDAAAA,iEAAAA;mBAPjD,2CAAA,sEAAA,AAAA8B,wDAAA,AAAAR,eAAAK,zFAISS;;;AAJT;;;;;CAAA,KAAA;;;AAAA,AAAA,OAAAjC,mBAAS,AAACqB,8CAAM,AAACb,gBAAMc;;;AAJ7B,eAAA,CAAAX,WAAA;;;;AAAA;;;;;AAAA,OAAAG,qBAAA,AAAAC,gBAAAN,UAAA,AAAAO,0CAAA,AAAAC,qBAAAhB;;AAAA,OAAAa,qBAAA,AAAAC,gBAAAN,UAAA;;;AAAA,SAAA,AAAAxC,gBAAAgC,rBAAMmB;AAAN,AAAA,IACYE,IAAE,AAACxD,4CAAI8B,MAAMwB;AADzB,AAAA,OAAAF,eAAA,wGAAA,rBAEGxB,wGACC,AAAC6B,8CACC,iBAAAvB,qBAAA;yEAAA4B;AAAA,AAAA,YAAA1B,kBAAA,KAAA;AAAA,AAAA,IAAA0B,eAAAA;;AAAA,AAAA,IAAAzB,yBAAA,AAAAC,cAAAwB;AAAA,AAAA,GAAAzB;AAAA,AAAA,IAAAyB,eAAAzB;AAAA,AAAA,GAAA,AAAAE,6BAAAuB;AAAA,IAAAtB,kBA65EsC,AAAAqK,sBAAA/I;IA75EtCrB,qBAAA,AAAAC,gBAAAF;IAAAuB,WAAA,AAAAnB,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAuB,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAvB;AAAA,SAAA,AAAAK,eAAAN,gBAAAwB,pCAAME;AAAN,AAAA,IACY5D,OAAK,AAACN,4CAAIwD,EAAEU;IACZC,WAAS,kDAAA,IAAA,mFAAA,zIAACC,gJAAwBd,GAAGY;AAFjD,AAAA,AAAA,AAAAnB,uBAAAgB,SAAA,oBAAA,wGAAA,2CAAA,2DAAA,IAAA,0DAAA,zLAImBpC;;AAJnB,AAKiC,IAAA8C,WAAanE;IAAboE,WAAA,mFAAmBpB,GAAGY;AAAtB,AAAA,wGAAAO,SAAAC,uCAAAD,SAAAC,zJAAC1C,iDAAAA,oEAAAA;;SACd,uHAAA,vHAAC6C,gEAAUvE,kIACiB,iBAAA0E,WAAA,mFAAmB1B,GAAGY;AAAtB,AAAA,oHAAAc,6CAAAA,zJAACjD,uDAAAA,iEAAAA;mBAPjD,2CAAA,oDAISoC;;AAJT,eAAA,CAAAH,WAAA;;;;AAAA;;;;;AAAA,OAAAhB,qBAAA,AAAAC,gBAAAc,UAAA,AAAAE,wDAAA,AAAAd,qBAAAW;;AAAA,OAAAd,qBAAA,AAAAC,gBAAAc,UAAA;;;AAAA,SAAA,AAAA5D,gBAAA2D,rBAAMI;AAAN,AAAA,IACY5D,OAAK,AAACN,4CAAIwD,EAAEU;IACZC,WAAS,kDAAA,IAAA,mFAAA,zIAACC,gJAAwBd,GAAGY;AAFjD,AAAA,OAAAd,eAAA,oBAAA,wGAAA,2CAAA,2DAAA,IAAA,0DAAA,zLAImBzB;;AAJnB,AAKiC,IAAAgD,WAAarE;IAAbsE,WAAA,mFAAmBtB,GAAGY;AAAtB,AAAA,wGAAAS,SAAAC,uCAAAD,SAAAC,zJAAC5C,iDAAAA,oEAAAA;;SACd,uHAAA,vHAAC6C,gEAAUvE,kIACiB,iBAAA2E,WAAA,mFAAmB3B,GAAGY;AAAtB,AAAA,oHAAAe,6CAAAA,zJAAClD,uDAAAA,iEAAAA;mBAPjD,2CAAA,sEAAA,AAAAkC,wDAAA,AAAAZ,eAAAS,zFAISK;;;AAJT;;;;GAAA,KAAA;;;AAAA,AAAA,OAAAjC,mBAAS,AAACqB,8CAAM,AAACb,gBAAMc;sBAJ7B,AAAAN,0CAAA,AAAAG,eAAAlB;;;AAAA;;;;GAAA,KAAA;;AAAA,AAAA,OAAAD,mBAAS,AAACqB,8CAAM,AAACb,gBAAMZ;;;AAc9B,qBAAA,rBAAMoD,kDAAMC,YAAOC;AAAnB,AACE,IAAAC,gBAAA,AAAAC,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAF,6BAAA,AAAAI;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAR,2BAAA,AAAAI;;;AAAA,IAAAK,YAAA,CAAA,AAAAT,yBAAA;0BAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,8DAAA,CAAAA,cAAA,zLAAWY,mHAAe,gDAAA,hDAACC;0BAA3B,EAAA,EAAAJ,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,2FAAA,CAAAA,cAAA,tNACWc,mHAAe,gDAAA,hDAACD;2BAD3B,EAAA,EAAAJ,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,2FAAA,CAAAA,cAAA,vNAEWe,oHAAgB,gDAAA,hDAACF;uBAF5B,EAAA,EAAAJ,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,6DAAA,CAAAA,cAAA,rLAGWgB,gHAAgB,gDAAA,hDAACH;sBAH5B,EAAA,EAAAJ,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,gHAAA,CAAAA,cAAA,vOAIWiB,+GAAgB,gDAAA,hDAACJ;4BAJ5B,EAAA,EAAAJ,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,6DAAA,CAAAA,cAAA,1LAKWkB,qHAAiB,gDAAA,hDAACL;qBAL7B,EAAA,EAAAJ,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,mlBAAA,CAAAA,cAAA,zsBAOWmB,8GAAU,gDAAA,mFAAA,2CAAA,wDAAA,AAAAC,6BAAA,iEAAA,AAAAA,kCAAA,gEAAA,AAAAA,iCAAA,4EAAA,AAAAA,nhBAACP,sPAAiBf,8FACKkB,kGACDC,6GACMC;4BAVjD,EAAA,EAAAT,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,9GAcWqB,qHAAiB,WAAKC;AAAL,AACC,GAAM,CAAA,AAAAF,yCAAA,zBAAIF;AAAV,AAA8B,AAACK,sBAAOT,oBAAe,oEAAA,AAAAM,pEAACI,oFAA2B1B,aAAOwB;;AAAxF;;AACA,AAACC,sBAAOR,qBAAgB,sCAAA,AAAAK,tCAACK,sDAA2B3B,aAAOwB;;AAC3D,OAACC,sBAAOX,oBAAeU;IAjBpD,CAAAtB,cAAA;4BAAA,EAAA,EAAAS,eAAA,AAAAC,cAAA,AAAAV,6BAAA,SAAA,CAAAA,cAAA,9GAkBW0B,qHAAiB;AAAA,AACC,0CAAA,1CAACH,sBAAOT;;AACR,2CAAA,3CAACS,sBAAOR;;AACR,iDAAA,1CAACQ,sBAAOX;IArBrC,CAAAZ,cAAA;IAAAW,WAAA,AA0BE,yBAAA,AAAAS,RAAM3E,wBAAOqD;oBAAb,AAAAsB,hBACMO,gCAAef;oBADrB,AAAAQ,hBAEMQ,gCAAed;qBAFrB,AAAAM,jBAGMS,iCAAgBd;iBAHtB,AAAAK,bAIMU,6BAAYd;gBAJlB,AAAAI,ZAKMW,4BAAWd;sBALjB,AAAAG,lBAMMY,kCAAiBd;eANvB,AAAAE,XAOMa,2BAAUd;IACVe,aAAM;AAAA,AACE,kEAAA,WAAAC,7EAACC,mDAAMjB;AAAP,AAAkB,oDAAA,7CAACkB,8EAAQ,kDAAAF,lDAACG;;;AAC5B,IAAAC,aAGyC,eAAA,AAAAnB,fAACoB,+BAAMrB;IAHhDoB,iBAAA,AAAA7H,4BAAA6H;gBAAA,AAAA5H,4CAAA4H,eAAA,vEAAO9F;qBAAP,AAAA9B,4CAAA4H,eAAA,5EACOT;oBADP,AAAAnH,4CAAA4H,eAAA,3EAEOR;0BAFP,AAAApH,4CAAA4H,eAAA,jFAGOP;AAHP,AAIE,AAACT,sBAAOzB,YAAOrD;;AACf,AAAC8E,sBAAOP,iBAAYc;;AACpB,AAACP,sBAAON,gBAAWc;;AACnB,OAACR,sBAAOL,sBAAiBc;;IACnCS,0BAAmB;AAAA,AACE,wFAAA,2CAAA,wDAAA,AAAArB,6BAAA,iEAAA,AAAAA,kCAAA,gEAAA,AAAAA,iCAAA,4EAAA,AAAAA,jeAACgB,mDAAMjB,eAAUuB,kIAAc5C,8FACKkB,kGACDC,6GACMC;;IAC9DyB,mBAAgB,WAAKC,IAAIC;AAAT,AACE,AAACT,mDAAMtC,YAAOgD,0BAAcF,IAAIC;;AAChC,AAACT,mDAAMlB,sBAAiB6B;;AACxB,AAACN;;AACD,QAACf,sDAAAA,wDAAAA;;IACnBsB,mBAAgB,WAAKJ,IAAIC;AAAT,AACE,AAACT,mDAAMtC,YAAOmD;;AACd,AAACb,mDAAMtC,YAAOoD,0BAAcN,IAAIC;;AAChC,AAACT,mDAAMtC,YAAOqD,2BAAeN;;AAC7B,CAACnB,sDAAAA,wDAAAA;;AACD,AAACU,mDAAMpB,iBAAYoC;;AACnB,mEAAA,WAAAC,9EAACjB,mDAAMnB;AAAP,AAAmB,GAAI,6CAAAoC,iBAAA,9DAACC;AAAL;;AAAA;;;;AACnB,4CAAA,5CAAC/B,sBAAOL;;AACR,AAACuB;;AACD,oBAAM,AAACc,gCAAc9G;AAArB,AACE,QAACsD,gDAAAA,kDAAAA;;AADH;;;IAElBrD,yBAAiB,WAAK4E;AAAL,AACE,GACE,AAACkC,0BAAU5B,cAAcN;AAAMmC;;AADjC,GAEE,AAACD,0BAAU3B,eAAeP;AAAKpF;;AAFjC,GAGE,AAACoH,6CAAE3B,cAAcL;AAAcoC;;AAHjC;;;;;IAInBC,kBAAW,WAAK1I,KAAKqG;AAAV,AACE,GACE,iHAAA,/GAAK,AAACZ,cAAI,AAAA,qFAAQzF,cACb,GAAK,AAACuI,0BAAU5B,cAAcN,YAC9B,GAAK,AAACkC,0BAAU3B,eAAeP;AAAO,QAACI,sDAAAA,wDAAAA;;AAH9C,oBAKE,iBAAAzF,oBAAK,AAAA,qFAAQhB;AAAb,AAAA,oBAAAgB;AAAA,gEAAA,vDACK,GAAK,AAACuH,0BAAU5B,cAAcN,cAC9B,GAAK,AAACkC,0BAAU3B,eAAeP,YAC/B,6CAAA,AAAAF,7CAACkC,6DAAGrC,iBAAW,AAAC2C,2BAAS,AAAA,qFAAQ3I;;AAHtCgB;;;AAG+C,QAACoF,sDAAAA,2DAAAA,PAAiBC,uCAAAA;;AARnE,GAUE,EAAK,GAAK,kBAAA,jBAAMK,8BACX,AAAC6B,0BAAU5B,cAAcN;AAAa,OAACqB,iBAAYhB,cAAcL;;AAXxE,GAaE,EAAK,GAAK,kBAAA,jBAAMK,8BACX,AAAC6B,0BAAU3B,eAAeP;AAAY,OAAC0B,iBAAYrB,cAAcL;;AAdxE;;;;;;AA7CnB,AA6DE,AAACuC,yGAAQ5B;;AA7DX,kHAAA,mFAAA,wGAAA,2CAAA,mDAAA,2CAAA,2qBAAA,wGAAA,2CAAA,mDAAA,2CAAA,gGAAA,kCAAA,wGAAA,qDAAA,aAAA,oKAAA,wGAAA,qDAAA,aAAA,wGAAA,mFAAA,wGAAA,qDAAA,aAAA,2GAAA,2CAAA,qDAAA,yDAAA,mGAAA,6EAAA,3oFA8DGrF,8LACEL,qNAAkBuH,yCACjB,CAAA,iEAAA,+BAAA,3CAAchC,iBAAgB,AAACiC,eAAKhC,qCACtC,2BAAA,AAAA,wGAAA,2CAAA,mDAAA,2CAAA,8LAAA,xcAAM,mBAAA,lBAAGC,2GACNzF,qNAAkBuH,yCACjB,8DAAA,jBAAK9B,0IACRzF,qNAAkBuH,8JAClBE,0KACAxH,4BAAcC,MAAMC,uBAAiBiH,2GACrCK,0KACAzH,2LACKyH,0KACAC,iPAImB,8BAAA,7BAAI,AAAC5G,gBAAM4E,4EAEdC;;AA1G5B,AAAAvB;;AA8GF,6BAAA,7BAAMuD,kEAAcpE,YAAOqE;AAA3B,AACE,IAAAC,gBAAA,AAAAnE,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAkE,6BAAA,AAAAhE;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAA4D,2BAAA,AAAAhE;;;AAAA,IAAAiE,YAAA,CAAA,AAAAD,yBAAA;4BAAA,EAAA,EAAAC,eAAA,AAAA3D,cAAA,AAAA0D,6BAAA,SAAA,CAAAA,cAAA,ojBAAA,CAAAA,cAAA,jrBAAWG,qHAAiB,AAAC1D,gDAAO,6CAAA,7CAACwB,8EACC,AAACmC,sDACC,+CAAA,/CAACC,mDAASC,6BACV,+CAAA,/CAACD,mDAASE,8EACV,+CAAA,/CAACF,mDAASG,4BACV,+CAAA,/CAACH,mDAASI;0BALlD,EAAA,EAAAR,eAAA,AAAA3D,cAAA,AAAA0D,6BAAA,SAAA,CAAAA,cAAA,8DAAA,CAAAA,cAAA,zLAMWxD,mHAAiB,gDAAA,hDAACC;0BAN7B,EAAA,EAAAwD,eAAA,AAAA3D,cAAA,AAAA0D,6BAAA,SAAA,CAAAA,cAAA,2FAAA,CAAAA,cAAA,tNAOWtD,mHAAiB,gDAAA,hDAACD;4BAP7B,EAAA,EAAAwD,eAAA,AAAA3D,cAAA,AAAA0D,6BAAA,SAAA,CAAAA,cAAA,9GAQW1C,qHAAiB;AAAA,AACC,0CAAA,1CAACH,sBAAOT;;AACR,iDAAA,1CAACS,sBAAOX;IAVrC,CAAAwD,cAAA;4BAAA,EAAA,EAAAC,eAAA,AAAA3D,cAAA,AAAA0D,6BAAA,SAAA,CAAAA,cAAA,9GAWW/C,qHAAiB,WAAKlG,MAAMmG;AAAX,AACE,IAAMwD,OAAK,sCAAA,uDAAA,sCAAA,qDAAA,tLACE,AAACvJ,4BAAUJ,iEACX,AAACM,4BAAUN;AAFxB,AAGE,AAACoG,sBAAOT,oBAAe,kCAAA,AAAAM,lCAAC2D,kDAAuBjF,aAAOgF;;AACtD,OAACvD,sBAAOX,oBAAeU;IAhBvD,CAAA8C,cAAA;uBAAA,EAAA,EAAAC,eAAA,AAAA3D,cAAA,AAAA0D,6BAAA,SAAA,CAAAA,cAAA,zGAiBWzB,gHAAiB,WAAKC,IAAIC;AAAT,AACE,GACE,OAASD;AAAK,AAAI,AAACR,0DAAMtC,YAAOkF,oBAAUnC,KAAKoC,6EAAe,4CAAA,AAAA7D,5CAAC8D,4DAAKX,uBAAiB3B;;AACnE,6FAAA,7FAACR,mDAAMmC,sBAAiBY,gBAAMvC;;AAC9B,QAAClB,sDAAAA,wDAAAA;;AAHrB,AAIgB,AAAI,AAACU,mDAAMtC,YAAOgD,0BAAcF,IAAIC;;AAChC,QAACnB,sDAAAA,wDAAAA;;;IAvBnD,CAAA0C,cAAA;IAAAE,WAAA,AA0BE,yBAAA,AAAAlD,RAAM3E,wBAAOqD;sBAAb,AAAAsB,lBACMgE,kCAAiBb;oBADvB,AAAAnD,hBAEMO,gCAAef;oBAFrB,AAAAQ,hBAGMQ,gCAAed;IAEfpE,yBAAiB,WAAK4E;AAAL,AAAU,GACE,AAACkC,0BAAU5B,cAAcN;AAAMmC;;AADjC,GAEE,AAACH,6CAAE3B,cAAcL;AAAcoC;;AAFjC;;;;IAG3B2B,oBAAa,WAAKlK,MAAMmG;AAAX,AACE,GACE,OAASA;AAAK,QAACD,sDAAAA,iEAAAA,bAAiBlG,6CAAAA,vCAAMmG,6CAAAA;;AADxC,GAEE,EAAK,AAACZ,cAAIvF,YACL,GAAK,AAACqI,0BAAU5B,cAAcN;AAAO,QAACI,sDAAAA,wDAAAA;;AAH7C;;;;IAKf/E,mBAAY,WAAA2I,SAAoBhE;AAApB,AAAA,IAAAiE,aAAAD;IAAAC,iBAAA,AAAA7K,4BAAA6K;YAAA,AAAA5K,4CAAA4K,eAAA,nEAAMpK;AAAN,AACE,GACG,EAAK,AAACuF,cAAIvF,YACL,GAAK,AAACqI,0BAAU5B,cAAcN;AAAO,QAACI,sDAAAA,wDAAAA;;AAF9C,oBAIG,iBAAAzF,oBAAKd;AAAL,AAAA,oBAAAc;AACK,UAAK,AAACuH,0BAAU5B,cAAcN;;AADnCrF;;;AAC0C,QAACoF,sDAAAA,iEAAAA,bAAiBlG,6CAAAA,vCAAMmG,6CAAAA;;AALrE,GAOG,EAAK,GAAK,kBAAA,jBAAMK,8BACX,AAAC6B,0BAAU5B,cAAcN;AAAY,QAACqB,iDAAAA,oEAAAA,rBAAYhB,gDAAAA,lCAAcL,gDAAAA;;AARxE;;;;;AAfpB,AAAA,kHAAA,mFAAA,wGAAA,2CAAA,mDAAA,2CAAA,gGAAA,kCAAA,9dAwBI1E,8LACGN,qNAAkBwH,8JAClBvH,qBACE,iBAAAM,qBAAA,mDAAA2I;AAAA,AAAA,YAAAzI,kBAAA,KAAA;AAAA,AAAA,IAAAyI,eAAAA;;AAAA,AAAA,IAAAxI,qBAAA,AAAAC,cAAAuI;AAAA,AAAA,GAAAxI;AAAA,AAAA,IAAAwI,eAAAxI;AAAA,AAAA,GAAA,AAAAE,6BAAAsI;AAAA,IAAArI,kBA8uEsC,AAAAqK,sBAAAhC;IA9uEtCpI,qBAAA,AAAAC,gBAAAF;IAAAsI,WAAA,AAAAlI,uBAAAH;AAAA,AAAA,GAAA,AAAA,iBAAAsI,WAAA;;AAAA,AAAA,GAAA,CAAAA,WAAAtI;AAAA,UAAA,AAAAK,eAAAN,gBAAAuI,rCAAME;AAAN,AAAA,IACYzK,QAAM,AAAC+J,4CAAIE,gBAAgBQ;AADvC,AAAA,AAAA,AAAAlI,uBAAA+H,SAAA,oBAAA,wGAAA,2CAAA,2DAAA,IAAA,0DAAA,zLAEcnJ;;AAFd,AAG4B,OAAC+I,kBAAalK,MAAMyK;;sXAHhD,2CAAA,oDAESA,5cAEO,wPAAA,xPAACpG,gEAAU,wEAAA,xEAACqG,8CAAMC,iFAAqB3K,oIACX,AAACuB,uBAAiBkJ;;AAL9D,eAAA,CAAAF,WAAA;;;;AAAA;;;;;AAAA,OAAA/H,qBAAA,AAAAC,gBAAA6H,UAAA,AAAAE,yCAAA,AAAA7H,qBAAA0H;;AAAA,OAAA7H,qBAAA,AAAAC,gBAAA6H,UAAA;;;AAAA,UAAA,AAAA3K,gBAAA0K,tBAAMI;AAAN,AAAA,IACYzK,QAAM,AAAC+J,4CAAIE,gBAAgBQ;AADvC,AAAA,OAAA7H,eAAA,oBAAA,wGAAA,2CAAA,2DAAA,IAAA,0DAAA,zLAEczB;;AAFd,AAG4B,OAAC+I,kBAAalK,MAAMyK;;sXAHhD,2CAAA,iEAAA,AAAAD,yCAAA,AAAA3H,eAAAwH,rEAESI,5cAEO,wPAAA,xPAACpG,gEAAU,wEAAA,xEAACqG,8CAAMC,iFAAqB3K,oIACX,AAACuB,uBAAiBkJ;;;AAL9D;;;;GAAA,KAAA;;AAAA,AAAA,OAAA/I,mBAAU,AAACqB,8CAAM,AAACb,gBAAM+H;aA3BjC,wGAAA,qDAAA,aAAA,qKAAA,wGAAA,qDAAA,aAAA,wGAAA,mFAAA,wGAAA,qDAAA,aAAA,2GAAA,2CAAA,qDAAA,yDAAA,0KAAA,mFAAA,5wCAiCOpB,0KACAxH,4BAAcC,MAAMC,uBAAiBC,4GACrCqH,0KACAzH,2LACGyH,0KACAC,iPAImB,AAAC8B,oBAAU,AAACC,+CAAOC,qBAAKb,4EAE3BjB;;AAtE5B,AAAAG;;AA0EF,2BAAA,3BAAM4B,8DAAYpG,YAAOqG,oBAAehC,iBAAYiC,mBAAcC,mBAAcC;AAAhF,AACE,YAAA,AAAAlF,RAAM3E,wBAAOqD;oBAAb,AAAAsB,hBACMmF,gCAAeJ;AADrB,AAAA,kHAAA,mFAAA,wGAAA,qDAAA,aAAA,2GAAA,2CAAA,qDAAA,yDAAA,qFAAA,uBAAA,wGAAA,qDAAA,wqBAAA,2GAAA,2CAAA,qDAAA,yDAAA,qFAAA,8BAAA,wGAAA,qDAAA,99DAEGvJ,8LAEGoH,0KACAC,2OAEgBqC,qIAEhBtC,uFACD,kBAAA,AAAA5C,sCAAA,AAAA,2GAAA,2CAAA,qDAAA,yDAAA,qFAAA,4BAAA,3YAAO+E,yGACJlC,2OAEgBmC,6DAEnB,kBAAA,AAAAhF,sCAAA,AAAA,wGAAA,qDAAA,aAAA,hMAAO+E,yGACJnC,gLACFC,2OAEgBoC,4IAEhBrC;;AAGR,oBAAA,pBAAMwC;AAAN,AACE,IAAAC,gBAAA,AAAAxG,8BAAA;AAAA,AAAA,IAAAC,2BAAAC;AAAA,AAAA,GAAA,CAAAD,4BAAA;AAAA;AAAA,IAAAE,yBAAAF;AAAA,AAAA,GAAA,CAAA,AAAAuG,6BAAA,AAAArG;AAAA,AAAA,GAAAC;AAAA,AAAA,AAAA,EAAAC,wBAAAC,4BAAAC,eAAA,CAAA,iDAAA;;AAAA;;AAAA;;AAAA,CAAA,AAAAiG,2BAAA,AAAArG;;;AAAA,IAAAsG,YAAA,CAAA,AAAAD,yBAAA;iCAAA,EAAA,EAAAC,eAAA,AAAAhG,cAAA,AAAA+F,6BAAA,SAAA,CAAAA,cAAA,8GAAA,CAAAA,cAAA,hPAAWG,0HAAsB,gDAAA,hDAAC/F;kBAAlC,EAAA,EAAA6F,eAAA,AAAAhG,cAAA,AAAA+F,6BAAA,SAAA,CAAAA,cAAA,qFAAA,CAAAA,cAAA,xMACW3G,2GAAO,AAACe,gDAAOgG;0BAD1B,EAAA,EAAAH,eAAA,AAAAhG,cAAA,AAAA+F,6BAAA,SAAA,CAAAA,cAAA,8DAAA,CAAAA,cAAA,zLAEWN,mHAAe,gDAAA,hDAACtF;uBAF3B,EAAA,EAAA6F,eAAA,AAAAhG,cAAA,AAAA+F,6BAAA,SAAA,CAAAA,cAAA,OAAA,hHAIWtC;AAJX,AAIwB,AAAI,0CAAA,AAAA/C,1CAACG,sBAAO4E,oCAAgBrG;;AACxB,wDAAA,jDAACyB,sBAAOqF;IALpC,CAAAH,cAAA;yBAAA,EAAA,EAAAC,eAAA,AAAAhG,cAAA,AAAA+F,6BAAA,SAAA,CAAAA,cAAA,OAAA,lHAOWL;AAPX,AAO0B,AAAI,kCAAA,AAAAhF,lCAACG,sBAAOzB,4BAAQqG;;AAChB,wDAAA,jDAAC5E,sBAAOqF;IARtC,CAAAH,cAAA;yBAAA,EAAA,EAAAC,eAAA,AAAAhG,cAAA,AAAA+F,6BAAA,SAAA,CAAAA,cAAA,OAAA,lHAUWJ;AAVX,AAU0B,AAAI,AAAC9E,sBAAOzB,YAAO+G;;AACf,QAAC1C,iDAAAA,mDAAAA;IAX/B,CAAAsC,cAAA;yBAAA,EAAA,EAAAC,eAAA,AAAAhG,cAAA,AAAA+F,6BAAA,SAAA,CAAAA,cAAA,OAAA,lHAaWH;AAbX,AAa0B,AAAI,AAAC/E,sBAAOzB,YAAO,AAACgH;;AAChB,wDAAA,jDAACvF,sBAAOqF;IAdtC,CAAAH,cAAA;sBAAA,EAAA,EAAAC,eAAA,AAAAhG,cAAA,AAAA+F,6BAAA,SAAA,CAAAA,cAAA,OAAA,/GAgBW1G;AAhBX,AAgB0B,wDAAA,jDAACwB,sBAAOqF;IAhBlC,CAAAH,cAAA;IAAAE,WAAA,AAkBE,iBAAMI,IAAE,6CAAA,7CAACC;AAAT,AAAA,+GAAA,2CAAA,mDAAA,2CAAA,2GAAA,yDAAA,eAAA,qDAAA,eAAA,mFAAA,wGAAA,qDAAA,roBACG1K,0OAA6B2K,iVAG1BjD,wFACD,iBAAAkD,WAAA,AAAA9F,gBAAOwF;IAAPM,eAAA,EAAA,CAAAA,oBAAAC,oBAAA,AAAAD,aAAA;AAAA,AAAA,QAAAA;KAAA;AACc,OAAChB,yBAAWpG,YAAOqG,oBAAehC,iBAAYiC,mBAAcC,mBAAcC;;;KADxF;AAEa,OAACpC,2BAAapE,YAAOqE;;;KAFlC;AAGQ,OAACtE,mBAAKC,YAAOC;;;;AAHrB,MAAA,KAAAqH,MAAA,CAAA,mEAAAF;;;;;AAvBP,AAAAP;;AA6BF,qBAAA,rBAAeU;AAAf,AACE,wDAAA,jDAACC,oIAAad,0BACZ,wBAAA,xBAAiBe;;;AAErB,AAACF","names":["var_args","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","pushfight.web/cell->box","p__35337","map__35338","cljs.core/--destructure-map","cljs.core.get","seq35335","G__35336","cljs.core/first","cljs.core/next","self__5754__auto__","cell","cell-background","piece","anchored?","pushfight.core/anchored?","icon-color","pushfight.core/black?","rewig.theme.gruvbox/bg0","pushfight.core/white?","rewig.theme.gruvbox/fg0","rewig.theme.gruvbox/light-orange","icon","pushfight.core/wall-cell?","pushfight.core/round?","pushfight.core/pusher?","icon-background-color","and__5043__auto__","rewig.theme.gruvbox/danger","background-color","pushfight.core/void-cell?","rewig.theme.gruvbox/light-gray","rewig.components/box","rewig.components/row","pushfight.web/display-board","board","cell-background?","cell-click!","rewig.components/column","iter__5523__auto__","s__35340","cljs.core/LazySeq","temp__5804__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__5521__auto__","size__5522__auto__","cljs.core/count","b__35342","cljs.core/chunk-buffer","i__35341","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__35339","cljs.core/chunk-rest","cljs.core/cons","cljs.core/rest","rn","cljs.core.range","r","cljs.core.doall","s__35344","b__35346","i__35345","iter__35343","s__35354","b__35356","i__35355","iter__35353","cn","cell-key","clojure.string.join","G__35347","G__35348","G__35350","G__35351","G__35357","G__35358","G__35360","G__35361","pushfight.web.cell__GT_box","G__35349","G__35352","G__35359","G__35362","pushfight.web/game","board*","game-over!","with-let35365","reagent.ratom/with-let-values","temp__5808__auto__","reagent.ratom/*ratom-context*","c__11871__auto__","reagent.debug/has-console","reagent.debug/tracking","reagent.debug/track-console","js/console","init35366","cljs.core/not","res35367","selected-cell*","reagent.core.atom","move-to-cells*","pushable-cells*","turn-count*","team-turn*","remaining-moves*","game-log*","cljs.core/deref","highlight-cells!","pos","cljs.core/reset!","pushfight.core.get_available_move_pos","pushfight.core/get-available-push-pos","clear-selection!","selected-cell","move-to-cells","pushable-cells","turn-count","team-turn","remaining-moves","game-log","undo!","p1__35363#","cljs.core.swap_BANG_","cljs.core.into","cljs.core.drop_last","map__35368","cljs.core/last","update-game-state!","cljs.core/conj","move-piece!","src","dest","pushfight.core/move-piece","cljs.core/dec","push-piece!","pushfight.core/remove-anchors","pushfight.core/push-piece","pushfight.core/anchor-cell","cljs.core/inc","p1__35364#","cljs.core._EQ_","pushfight.core/game-over?","cljs.core/contains?","rewig.theme.gruvbox/light-green","rewig.theme.gruvbox/highlight","box-click!","pushfight.core/team?","cljs.core.println","rewig.theme.gruvbox/text","cljs.core/name","rewig.components/gap","rewig.components/button","pushfight.web/place-pieces","start-game!","with-let35369","init35370","res35371","unplaced-pieces*","cljs.core.concat","cljs.core.repeat","pushfight.core/white-square","pushfight.core/white-round","pushfight.core/black-round","pushfight.core/black-square","side","pushfight.core/get-half-board-pos","cljs.core/update-in","pushfight.core/place-piece","cljs.core.nth","cljs.core/assoc","unplaced-pieces","piece-click!","p__35372","map__35373","s__35375","b__35377","i__35376","iter__35374","idx","cljs.core.assoc","pushfight.core/floor-cell","cljs.core/not-empty","cljs.core.remove","cljs.core/nil?","pushfight.web/start-menu","initial-board*","restart-game!","default-game!","place-pieces!","initial-board","pushfight.web/app","with-let35378","init35379","res35380","game-lifecycle-stage*","pushfight.core/sample-board","pushfight.core/make-standard-board","k","cljs.core.atom","rewig.theme.gruvbox/background","G__35381","cljs.core/Keyword","js/Error","pushfight.web/main","reagent.dom.render","js/document","cljs.core/chunk-first"],"sourcesContent":["(ns pushfight.web\n  (:require \n    [reagent.core :as r :refer [with-let]]\n    [reagent.dom :as rdom]\n    [rewig.components :refer [box row column gap button]]\n    [pushfight.core :as pf]\n    [rewig.theme.gruvbox :as theme]\n    [clojure.string :as string]))\n      \n\n(defn cell->box [cell & {:keys [cell-background]}]\n  (let [piece (:piece cell)\n        anchored? (pf/anchored? cell)\n        icon-color (cond \n                     ; (and (some? piece) anchored?) \"#cc241d\"\n                     (pf/black? piece) theme/bg0\n                     (pf/white? piece) theme/fg0\n\n                     anchored?     theme/light-orange\n                     :transparent  \"rgba(0,0,0,0)\")\n\n        icon       (cond \n                     (pf/wall-cell? cell) \"\udb81\udffe\"\n                     anchored?            \"\uf0fe\"\n                     (pf/round? piece)    \"\uf111\"\n                     (pf/pusher? piece)   \"\uf0c8\"\n                     :empty-cell          \"\uf0c8\")\n        icon-background-color (when (and anchored? (some? piece)) theme/danger)\n        background-color (cond \n                           cell-background      cell-background\n                           (pf/void-cell? cell) \"rgba(0,0,0,0)\"\n                           (pf/wall-cell? cell) theme/danger\n                           :else                theme/light-gray)]\n    \n    [box {:css {:background-color background-color\n                :color icon-color}\n          :padding 3}\n      [row {:css {:background-color icon-background-color}} \n        icon]]))\n\n\n(defn display-board [board cell-background? cell-click!]\n    [column\n       (for [rn (range (count board)) \n             :let [r (get board rn)]]\n         [row \n          [(doall\n             (for [cn (range (count r))\n                   :let [cell (get r cn)\n                         cell-key (string/join \"-\" [\"cell\" rn cn])]]\n\n               ^{:key cell-key}[box {:padding 0.2\n                                     :click! #(cell-click! cell [rn cn])}\n                                 (cell->box cell \n                                            :cell-background (cell-background? [rn cn]))]))]])])\n\n\n(defn game [board* game-over!]\n  (with-let [selected-cell* (r/atom nil)\n             move-to-cells* (r/atom #{})\n             pushable-cells* (r/atom #{})\n             turn-count*     (r/atom 1)\n             team-turn*      (r/atom :white)\n             remaining-moves* (r/atom 2)\n\n             game-log* (r/atom [{:board @board* \n                                 :turn-count @turn-count* \n                                 :team-turn @team-turn* \n                                 :remaining-moves @remaining-moves*}])\n\n             \n\n             highlight-cells! (fn [pos]\n                               (when (> @remaining-moves* 0) (reset! move-to-cells* (pf/get-available-move-pos @board* pos)))\n                               (reset! pushable-cells* (pf/get-available-push-pos @board* pos))\n                               (reset! selected-cell* pos))\n             clear-selection! (fn []\n                               (reset! move-to-cells* nil)\n                               (reset! pushable-cells* nil)\n                               (reset! selected-cell* nil))]\n             \n             \n             \n                                                                         \n    (let [board @board*\n          selected-cell @selected-cell*\n          move-to-cells @move-to-cells*\n          pushable-cells @pushable-cells*\n          turn-count @turn-count*\n          team-turn @team-turn*\n          remaining-moves @remaining-moves*\n          game-log @game-log*\n          undo! (fn [] \n                  (swap! game-log* #(into [] (drop-last %)))\n                  (let [{board :board\n                         turn-count :turn-count\n                         team-turn :team-turn\n                         remaining-moves :remaining-moves} (last @game-log*)]\n                    (reset! board* board)\n                    (reset! turn-count* turn-count)\n                    (reset! team-turn* team-turn)\n                    (reset! remaining-moves* remaining-moves)))\n          update-game-state! (fn []\n                               (swap! game-log* conj {:board @board*\n                                                      :turn-count @turn-count*\n                                                      :team-turn @team-turn* \n                                                      :remaining-moves @remaining-moves*}))\n          move-piece!     (fn [src dest]\n                            (swap! board* pf/move-piece src dest)\n                            (swap! remaining-moves* dec)\n                            (update-game-state!)\n                            (clear-selection!))\n          push-piece!     (fn [src dest]\n                            (swap! board* pf/remove-anchors)\n                            (swap! board* pf/push-piece src dest)\n                            (swap! board* pf/anchor-cell dest)\n                            (clear-selection!)\n                            (swap! turn-count* inc)\n                            (swap! team-turn* #(if (= % :white) :black :white))\n                            (reset! remaining-moves* 2)\n                            (update-game-state!)\n                            (when (pf/game-over? board)\n                              (game-over!)))\n          cell-background? (fn [pos] \n                             (cond \n                               (contains? move-to-cells pos)  theme/light-green\n                               (contains? pushable-cells pos) theme/danger\n                               (= selected-cell pos)          theme/highlight))\n          box-click! (fn [cell pos]\n                       (cond \n                         (and (not (:piece cell))\n                              (not (contains? move-to-cells pos))\n                              (not (contains? pushable-cells pos))) (clear-selection!)\n                         \n                         (and (:piece cell)\n                              (not (contains? move-to-cells pos))\n                              (not (contains? pushable-cells pos))\n                              (= @team-turn* (pf/team? (:piece cell)))) (highlight-cells! pos)\n\n                         (and (not (nil? selected-cell))\n                              (contains? move-to-cells pos))        (move-piece! selected-cell pos)\n\n                         (and (not (nil? selected-cell))\n                              (contains? pushable-cells pos))       (push-piece! selected-cell pos)))]\n      \n      (println game-log)\n      [column\n       [[row {:css {:color theme/text}}\n          (str \"Turn #\" turn-count \": \" (name team-turn) \" turn\")]\n        (when (> remaining-moves 0)\n          [row {:css {:color theme/text}}\n            (str remaining-moves \" Moves left\")])\n        [row {:css {:color theme/text}} \"Push to finish the turn\"]\n        [gap :size 20]\n        [display-board board cell-background? box-click!]\n        [gap :size 20] \n        [row   \n            [[gap :size 60]      \n             [button {\n                      ; :css {:background-color theme/primary}\n                      ;       :color theme/text}\n                      :type :danger\n                      :disabled? (<= (count game-log) 1) \n                      ; :align :center :content-align :center\n                      :click! undo!}\n               \"Undo!\"]]]]])))\n\n\n(defn place-pieces [board* start-game!]\n  (with-let [unplaced-pieces* (r/atom (into []\n                                        (concat \n                                          (repeat 3 pf/white-square)\n                                          (repeat 2 pf/white-round)\n                                          (repeat 2 pf/black-round)\n                                          (repeat 3 pf/black-square)))) ;; replace with stack (would also look better...) \n             selected-cell*   (r/atom nil)\n             move-to-cells*   (r/atom #{})\n             clear-selection! (fn []\n                               (reset! move-to-cells* nil)\n                               (reset! selected-cell* nil))\n             highlight-cells! (fn [piece pos]\n                                (let [side (cond \n                                             (pf/black? piece) :right\n                                             (pf/white? piece) :left)]\n                                  (reset! move-to-cells* (pf/get-half-board-pos @board* side))\n                                  (reset! selected-cell* pos)))\n             move-piece!      (fn [src dest]\n                                (cond \n                                  (number? src) (do (swap! board* update-in dest pf/place-piece (nth @unplaced-pieces* src))\n                                                    (swap! unplaced-pieces* assoc src nil)\n                                                    (clear-selection!))\n                                  :else         (do (swap! board* pf/move-piece src dest)\n                                                    (clear-selection!))))]\n             \n                         \n    (let [board @board*\n          unplaced-pieces @unplaced-pieces*\n          selected-cell @selected-cell*\n          move-to-cells @move-to-cells*\n          \n          cell-background? (fn [pos] (cond \n                                       (contains? move-to-cells pos)  theme/light-green\n                                       (= selected-cell pos)          theme/highlight))\n          piece-click! (fn [piece pos]\n                         (cond \n                           (number? pos) (highlight-cells! piece pos)\n                           (and (not piece)\n                                (not (contains? move-to-cells pos))) (clear-selection!)))\n\n          cell-click! (fn [{piece :piece} pos]\n                        (cond \n                           (and (not piece)\n                                (not (contains? move-to-cells pos))) (clear-selection!)\n                           \n                           (and piece\n                                (not (contains? move-to-cells pos))) (highlight-cells! piece pos)\n\n                           (and (not (nil? selected-cell))\n                                (contains? move-to-cells pos))       (move-piece! selected-cell pos)))]\n       [column\n         [[box {:css {:color theme/text}} \"pieces to choose from: \"]\n          [row\n             (for [idx (range (count unplaced-pieces))\n                   :let [piece (nth unplaced-pieces idx)]]\n               ^{:key idx}[box {:padding 0.2\n                                :click! #(piece-click! piece idx)}\n                             (cell->box (assoc pf/floor-cell :piece piece)\n                                        :cell-background (cell-background? idx))])]\n          [gap :size 10]\n          [display-board board cell-background? cell-click!]\n          [gap :size 10]\n          [row   \n            [[gap :size 60]      \n             [button {\n                      ; :css {:background-color theme/primary}\n                      ;       :color theme/text}\n                      :type :danger\n                      :disabled? (not-empty (remove nil? unplaced-pieces)) \n                      ; :align :center :content-align :center\n                      :click! start-game!}\n               \"Start Game!\"]]]]])))\n\n\n(defn start-menu [board* initial-board* start-game! restart-game! default-game! place-pieces!]\n  (let [board @board*\n        initial-board @initial-board*]\n    [column\n      [\n       [gap :size 10]\n       [button {\n                :type :danger\n                :click! place-pieces!}\n         \"Place Pieces\"]\n       [gap :size 10]\n       (when @initial-board*\n         [button {\n                  :type :danger\n                  :click! restart-game!}\n           \"Reuse Arrangement\"])\n       (when @initial-board*\n         [gap :size 10])\n       [button {\n                :type :danger\n                :click! default-game!}\n         \"Default Arrangement\"]\n       [gap :size 10]]]))\n\n\n(defn app []\n  (with-let [game-lifecycle-stage* (r/atom :game)\n             board* (r/atom pf/sample-board)\n             initial-board* (r/atom nil)\n             \n             start-game! #(do (reset! initial-board* @board*)\n                              (reset! game-lifecycle-stage* :game))\n\n             restart-game! #(do (reset! board* @initial-board*)\n                                (reset! game-lifecycle-stage* :game))\n\n             default-game! #(do (reset! board* pf/sample-board)\n                                (start-game!))\n\n             place-pieces! #(do (reset! board* (pf/make-standard-board))\n                                (reset! game-lifecycle-stage* :placement))\n\n             game-over!    #(reset! game-lifecycle-stage* :start-menu)]\n\n    (let [k (atom 0)]\n      [box {:css {:background-color theme/background\n                  :height \"100%\"}\n               :size \"100%\"}\n        [[gap :size \"35%\"]\n         (case @game-lifecycle-stage*\n           :start-menu (start-menu board* initial-board* start-game! restart-game! default-game! place-pieces!)\n           :placement (place-pieces board* start-game!) \n           :game (game board* game-over!))]])))\n\n\n(defn ^:export main []\n  (rdom/render [app]\n    (.getElementById js/document \"app\")))\n\n(main)\n"]}