{"version":3,"sources":["rewig/components.cljc"],"mappings":"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","names":["var_args","G__23288","rewig.components/box","js/Error","p__23289","map__23290","cljs.core/--destructure-map","cljs.core.get","children","rewig.components.box","element","align","content-align","wrap","direction","display","hidden?","reverse?","size","padding","margin","click!","attrs","css","props","or__5045__auto__","cljs.core.merge","cljs.core/name","rewig.util/size-map","rewig.util/named-sides-map","cljs.core.assoc","cljs.core/fn?","cljs.core/first","cljs.core/Keyword","cljs.core.into","G__23292","rewig.components/row","rewig.components.row","G__23294","rewig.components/column","rewig.components.column","args__5775__auto__","len__5769__auto__","i__5770__auto__","argseq__5776__auto__","cljs.core/IndexedSeq","rewig.components/gap","p__23296","map__23297","seq23295","self__5755__auto__","cljs.core/seq","flex","G__23299","rewig.components/button","p__23300","map__23301","rewig.components.button","disabled?","type","G__23302","rewig.theme.gruvbox/bg0","rewig.theme.gruvbox/fg0","rewig.theme.gruvbox/primary","rewig.theme.gruvbox/success","rewig.theme.gruvbox/danger","rewig.theme.gruvbox/fg4"],"sourcesContent":["(ns rewig.components\n  (:require \n            ; [reagent.core :as r :refer [with-let]]\n            [rewig.util :refer [size-map named-sides-map]]\n            [rewig.theme.gruvbox :as theme]))\n\n(defn box \n  ([children]\n   (box {} children))\n  ([{:keys [element \n            align content-align wrap direction display \n            hidden? reverse?\n            size padding margin \n            click!\n            attrs\n            css] :as props} children]\n   (let [\n         element       (or element :div)\n         attrs         (merge (or attrs {}) \n                              {:on-click click!}) \n                               \n\n         hidden?       (or hidden? false)\n         reverse?      (or reverse? false)\n\n         display       (name (or display :flex))\n         align         (name (or align :flex-start))\n         content-align (name (or content-align :flex-start))\n         wrap          (name (or wrap :nowrap))\n         direction     (str (name (or direction :row)) (when reverse? \"-reverse\"))\n\n\n         css           (merge css\n                              (size-map size)\n                              (named-sides-map \"margin\" margin)\n                              (named-sides-map \"padding\" padding)\n\n                              {:display display\n                               :align-items align\n                               :justify-content content-align\n                               :flex-wrap wrap\n                               :flex-direction direction})\n\n         props (assoc attrs :style (merge (:style attrs) css))\n         \n         children (cond \n                    (fn? (first children )) [children]\n                    (keyword? (first children )) [children]\n                    :else children)]\n\n     (into [element props] children)))) \n      \n\n(defn row\n ([children]\n  (row {} children))\n ([props children]\n  (let [props (assoc props :direction :row)]\n    (box props children))))\n\n\n(defn column\n ([children]\n  (column {} children))\n ([props children]\n  (let [props (assoc props :direction :column)]\n    (box props children))))\n\n\n(defn gap [& {:keys [size flex] :or {size 0}}]\n  (box {:css {:flex-grow flex :flex-shrink 0} :size size} nil))\n\n\n(defn button \n  ([children]\n   (button {} children))\n  ([{:keys [disabled? click! attrs type css] :as props} children]\n   (let [attrs (merge attrs \n                       {:disabled disabled?})\n         type (or type :normal)\n         css (merge {:cursor \"pointer\"\n                     :border \"none\"}\n                    (case type\n                      :normal  {:background-color theme/bg0\n                                :color theme/fg0}\n                                \n                      :primary {:background-color theme/primary\n                                :color theme/fg0}\n                                \n                      :success {:background-color theme/success\n                                :color theme/fg0}\n                                \n                      :danger  {:background-color theme/danger\n                                :color theme/fg0})\n                                \n\n                    (when disabled?\n                      {:color theme/fg4\n                       :cursor \"not-allowed\"\n                       :opacity \"0.25\"})\n                    css)\n\n\n         props (assoc props :element :button\n                            :attrs attrs\n                            :css css)]\n     (box props children))))\n"]}