{"version":3,"sources":["rewig/util.cljc"],"mappings":";AAEA,qBAAA,rBAAMA,kDAASC,OAAOC,OAAOC;AAA7B,qEAEI,4CAAA,WAAAC,vDAACC,rEACD,OAACM,8CAAMC;AADP,AAAM,OAAAN,uCAAA,CAAU,iBAAAC,WAAQ,gBAAAH,hBAACI;AAAT,AAAA,oFAAAD,6BAAAA,zGAACN,uCAAAA,iDAAAA;MAAX,CAA6B,iBAAAQ,WAAQ,iBAAAL,jBAACM;AAAT,AAAA,oFAAAD,6BAAAA,zGAACP,uCAAAA,iDAAAA;;GADjCC;;AAIP,sBAAA,tBAAMU,oDAAUC,GAAGC;AAAnB,AACE,OAACf,mBAAQc,GAAGE,mBAASD;;AAEvB,sBAAA,tBAAME,oDAAUH,GAAGC;AAAnB,AACE,OAACf,mBAAQgB,mBAASF,GAAGC;;AAIvB,sBAAA,tBAAMG,oDAAOC;AAAb,AACE,GAAI,OAASA;AAAG,uDAAA,HAAKA;;AAAQA;;;AAG/B,sBAAA,tBAAMC,oDAAUC;AAAhB,AACE,GACE,AAACC,qBAAKD;AAAM,OAACJ,oBAASC,oBAAMG;;AAD9B,GAEE,AAACE,wBAAQF;AAFX,kDAAA,kGAAA,3CAEyB,AAACH,oBAAM,AAACV,gBAAMa,gEAAe,AAACH,oBAAM,AAACR,iBAAOW;;AAFrE,AAAA,kDAAA,iFAAA,1BAGyB,AAACH,oBAAMG,+DAAc,AAACH,oBAAMG;;;;;AAGvD,uBAAA,vBAAMG,sDAAWL;AAAjB,AACE,GACE,AAACG,qBAAKH;AAAG,OAACF,oBAASC,oBAAMC;;AAD3B,oBAEE,iBAAAM,oBAAK,AAACF,wBAAQJ;AAAd,AAAA,GAAAM;AAAA,IAAAA,wBACK,6CAAA,7CAACC,iDAAI,AAACC,gBAAMR;AADjB,AAAA,GAAAM;AAAA,kDAAA,4HAAA,kIAAA,6HAAA,vUAC2B,AAACP,oBAAM,8CAAA,9CAACU,4CAAIT,kEACT,AAACD,oBAAM,8CAAA,9CAACU,4CAAIT,6DACd,AAACD,oBAAM,8CAAA,9CAACU,4CAAIT,+DACX,AAACD,oBAAM,8CAAA,9CAACU,4CAAIT;;AAJzCM;;;AAAAA;;;AAKA,IAAAA,oBAAK,AAACF,wBAAQJ;AAAd,AAAA,GAAAM;AAAA,IAAAA,wBACK,6CAAA,7CAACC,iDAAI,AAACC,gBAAMR;AADjB,AAAA,GAAAM;AAAA,kDAAA,4FAAA,kGAAA,8FAAA,xOAC2B,AAACP,oBAAM,AAACV,gBAAMW,8DACX,AAACD,oBAAM,AAACV,gBAAMW,yDAChB,AAACD,oBAAM,AAACR,iBAAOS,2DACd,AAACD,oBAAM,AAACR,iBAAOS;;AAJ5CM;;;AAAAA;;;AAPF,AAAA,kDAAA,2EAAA,iFAAA,4EAAA,pLAauB,AAACP,oBAAMC,6DACJ,AAACD,oBAAMC,wDACT,AAACD,oBAAMC,0DACN,AAACD,oBAAMC;;;;;AAGlC,6BAAA,7BAAMU,kEAAiBC,WAAWf;AAAlC,AACE,2BAAA,WAAAgB,/BAAClB;AAAD,AAAW,OAACmB,gDAAQ,yDAAA,ZAAKF,gBAAe,eAAAC,fAACE;GAAU,AAACT,qBAAUT","names":["rewig.util/map-map","key-fn","val-fn","hashmap","p1__12430#","cljs.core.map","cljs.core/PersistentHashMap","G__12431","cljs.core/first","G__12432","cljs.core/second","cljs.core.apply","cljs.core/merge","rewig.util/map-keys","fn","m","cljs.core/identity","rewig.util/map-vals","rewig.util/v->px","v","rewig.util/size-map","size","cljs.core/map?","cljs.core/vector?","rewig.util/sides-map","and__5043__auto__","cljs.core._EQ_","cljs.core/count","cljs.core.get","rewig.util/named-sides-map","sides-name","p1__12433#","cljs.core.keyword","cljs.core/name"],"sourcesContent":["(ns rewig.util)\n\n(defn map-map [key-fn val-fn hashmap]\n  (->> hashmap\n    (map #(hash-map (key-fn (first %)) (val-fn (second %))))\n    (apply merge)))\n\n(defn map-keys [fn m]\n  (map-map fn identity m))\n\n(defn map-vals [fn m]\n  (map-map identity fn m))\n\n\n\n(defn v->px [v] \n  (if (number? v) (str v \"px\") v))\n\n\n(defn size-map [size]\n  (cond \n    (map? size) (map-vals v->px size)\n    (vector? size) {:width (v->px (first size)) :height (v->px (second size))}\n    :single-value  {:width (v->px size) :height (v->px size)}))\n\n\n(defn sides-map [v]\n  (cond \n    (map? v) (map-vals v->px v)\n    (and (vector? v)\n         (= 4 (count v)) {:top (v->px (get v 0)) \n                          :bottom (v->px (get v 1))\n                          :left (v->px (get v 2)) \n                          :right (v->px (get v 3))})\n    (and (vector? v)\n         (= 2 (count v)) {:top (v->px (first v)) \n                          :bottom (v->px (first v))\n                          :left (v->px (second v)) \n                          :right (v->px (second v))})\n\n    :single-value  {:top (v->px v) \n                    :bottom (v->px v)\n                    :left (v->px v) \n                    :right (v->px v)}))\n\n\n(defn named-sides-map [sides-name m]\n  (map-keys #(keyword (str sides-name \"-\" (name %))) (sides-map m)))\n"]}